---
- name: ensure we have the parameters necessary to set up Docker storage
  hosts: 'localhost'
  connection: 'local'
  become: no
  gather_facts: no

  pre_tasks:
    - name: ensure all required variables are set
      fail:
        msg: 'This playbook requires {{ item }} to be set.'
      when: item not in vars and item not in hostvars[inventory_hostname]
      with_items:
        - origin_ci_hosts
        - origin_ci_connection
        - origin_ci_vagrant_home_dir
        - origin_ci_vagrant_provider
        - origin_ci_vagrant_hostname
        - origin_ci_docker_volume_group

- name: ensure the host has been bootstrapped
  include: './../bootstrap/host.yml'

- name: detect progress on guest to add idempotency to this playbook
  hosts: '{{ origin_ci_vagrant_hostname }}'
  connection: '{{ origin_ci_connection }}'
  become: yes
  become_user: root
  gather_facts: no

  tasks:
    - name: probe for the Docker volume group
      command: '/usr/sbin/lvs {{ origin_ci_docker_volume_group }}'
      failed_when: no
      register: origin_ci_docker_volume_group_probe

    - name: determine if we should be skipping the rest of the plays or not
      set_fact:
        origin_ci_skip_rest: '{{ origin_ci_docker_volume_group_probe | succeeded }}'

- name: extend the volume holding the guest's storage
  hosts: 'localhost'
  connection: 'local'
  become: no
  gather_facts: no

  tasks:
    - name: skip this play if we have detected a volume group
      meta: end_play
      when: "hostvars[origin_ci_vagrant_hostname]['origin_ci_skip_rest']"

    - name: pause the VM so we can add more disk capacity
      command: '/usr/bin/vagrant halt --force'
      args:
        chdir: '{{ origin_ci_vagrant_home_dir }}'

    - name: set up Docker storage using virtualization tools
      include: './tasks/docker-storage-{{ origin_ci_vagrant_provider }}.yml'

    - name: re-start the VM
      command: '/usr/bin/vagrant up --no-provision'
      args:
        chdir: '{{ origin_ci_vagrant_home_dir }}'

- name: partition the new space to be an LVM pool
  hosts: '{{ origin_ci_vagrant_hostname }}'
  connection: '{{ origin_ci_connection }}'
  become: yes
  become_user: root

  tasks:
    - name: skip this play if we have detected a volume group
      meta: end_play
      when: "hostvars[origin_ci_vagrant_hostname]['origin_ci_skip_rest']"

    - name: ensure we have the tools to work with logical volumes
      include: lvm2

    - name: determine the correct device to partition # TODO: determine how to select the right device
      set_fact:
        origin_ci_vagrant_device: '/dev/vda'
      when: origin_ci_vagrant_provider == 'libvirt'

    - name: determine the correct device to partition
      set_fact:
        origin_ci_vagrant_device: '/dev/sda'
      when: origin_ci_vagrant_provider == 'virtualbox'

    - name: partition the new space
      script: './../files/partition.sh {{ origin_ci_vagrant_device }}'
      register: origin_ci_fdisk
      ignore_errors: yes

    - name: fail if the previous command didn't exit like we expected
      fail:
        msg: Unexpected result from fdisk! Expected failure re-reading partition table.
      when: "( origin_ci_fdisk | succeeded ) or
             ( origin_ci_fdisk | failed and (
                                    'Re-reading the partition table failed' not in origin_ci_fdisk.stdout or
                                    'Device or resource busy' not in origin_ci_fdisk.stdout
                                 ) )"

    - name: commit the new partition table
      command: '/usr/sbin/partprobe'

    - name: determine the partition with the largest index on the device # TODO: is there a better way to choose this?
      shell: '/usr/bin/ls -1 {{ origin_ci_vagrant_device }}* | tail -n 1'
      register: origin_ci_device_partition

    - name: set up the volume group
      lvg:
        vg: '{{ origin_ci_docker_volume_group }}'
        pvs: '{{ origin_ci_device_partition.stdout }}'
        state: present
